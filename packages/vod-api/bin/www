#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('config');
var app = require('../app');
var models = require('../models');
var debug = require('debug')('vod:api');
var http = require('http');

if (!models.sequelize) {
  process.exit(1);
}

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.server.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

models.sequelize.sync({ force: false })
  .then(function() {
    return models.Channel.findById(config.admin.id);
  })
  .then(function(admin) {
    if (!admin) {
      models.Channel.create({
        id: config.admin.id,
        type: config.admin.type,
        isAdmin: config.admin.isAdmin,
        access: config.admin.access,
        type: config.admin.type,
        personal: config.admin.personal,
        picture: config.admin.picture,
        cover: config.admin.cover,
        name: config.admin.name,
        description: config.admin.description,
      });
    }
  })
  .then(function() {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  })
  .catch(function(e) {
    throw e;
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
